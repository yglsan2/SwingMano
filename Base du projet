import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ConsoleSwingBase {
    public static void main(String[] args) {
        ConsoleFrame frame = new ConsoleFrame("Console Swing Framework");

        // Ajouter un label
        frame.addLabel("Bienvenue dans l'interface CLI inspirée de Swing !");

        // Ajouter un bouton
        frame.addButton("Afficher un message", () -> System.out.println("Vous avez appuyé sur le bouton !"));

        // Ajouter un tableau
        List<List<String>> tableData = new ArrayList<>();
        tableData.add(List.of("Nom", "Age", "Ville"));
        tableData.add(List.of("Alice", "30", "Paris"));
        tableData.add(List.of("Bob", "25", "Lyon"));
        tableData.add(List.of("Charlie", "35", "Marseille"));
        frame.addTable("Liste des personnes", tableData);

        // Ajouter un menu déroulant (JComboBox)
        List<String> comboBoxOptions = List.of("Option 1", "Option 2", "Option 3");
        frame.addComboBox("Choisir une option", comboBoxOptions);

        // Ajouter un champ de texte (JTextField)
        frame.addTextField("Entrez votre nom");

        // Ajouter une case à cocher (JCheckBox)
        frame.addCheckBox("Accepter les conditions");

        // Ajouter un bouton radio (JRadioButton)
        frame.addRadioButton("Choisir le mode sombre", "Mode clair", "Mode sombre");

        // Ajouter une zone de texte multiligne (JTextArea)
        frame.addTextArea("Entrez un message ici", 5, 40);

        // Ajouter un bouton Quitter
        frame.addButton("Quitter", () -> System.exit(0));

        // Afficher le menu
        frame.show();
    }
}

abstract class ConsoleComponent {
    public abstract void render();
}

class ConsoleLabel extends ConsoleComponent {
    private final String text;

    public ConsoleLabel(String text) {
        this.text = text;
    }

    @Override
    public void render() {
        System.out.println(text);
    }
}

class ConsoleButton extends ConsoleComponent {
    private final String label;
    private final Runnable action;

    public ConsoleButton(String label, Runnable action) {
        this.label = label;
        this.action = action;
    }

    public void press() {
        action.run();
    }

    @Override
    public void render() {
        System.out.println("[ " + label + " ]");
    }
}

class ConsoleTable extends ConsoleComponent {
    private final String title;
    private final List<List<String>> data;

    public ConsoleTable(String title, List<List<String>> data) {
        this.title = title;
        this.data = data;
    }

    @Override
    public void render() {
        System.out.println(title);
        for (List<String> row : data) {
            System.out.println(String.join(" | ", row));
        }
    }
}

class ConsoleComboBox extends ConsoleComponent {
    private final String label;
    private final List<String> options;

    public ConsoleComboBox(String label, List<String> options) {
        this.label = label;
        this.options = options;
    }

    @Override
    public void render() {
        System.out.println(label);
        for (int i = 0; i < options.size(); i++) {
            System.out.println((i + 1) + ". " + options.get(i));
        }
    }

    public String getSelection(int choice) {
        if (choice >= 1 && choice <= options.size()) {
            return options.get(choice - 1);
        } else {
            return "Option invalide.";
        }
    }
}

class ConsoleTextField extends ConsoleComponent {
    private final String label;

    public ConsoleTextField(String label) {
        this.label = label;
    }

    @Override
    public void render() {
        System.out.print(label + ": ");
    }

    public String getInput() {
        Scanner scanner = new Scanner(System.in);
        return scanner.nextLine();
    }
}

class ConsoleCheckBox extends ConsoleComponent {
    private final String label;

    public ConsoleCheckBox(String label) {
        this.label = label;
    }

    @Override
    public void render() {
        System.out.println("[ ] " + label);
    }

    public boolean isChecked() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Cocher cette option (oui/non): ");
        return scanner.nextLine().equalsIgnoreCase("oui");
    }
}

class ConsoleRadioButton extends ConsoleComponent {
    private final String label;
    private final String option1;
    private final String option2;

    public ConsoleRadioButton(String label, String option1, String option2) {
        this.label = label;
        this.option1 = option1;
        this.option2 = option2;
    }

    @Override
    public void render() {
        System.out.println(label);
        System.out.println("1. " + option1);
        System.out.println("2. " + option2);
    }

    public String getSelection(int choice) {
        if (choice == 1) return option1;
        if (choice == 2) return option2;
        return "Option invalide.";
    }
}

class ConsoleTextArea extends ConsoleComponent {
    private final String label;
    private final int lines;
    private final int width;

    public ConsoleTextArea(String label, int lines, int width) {
        this.label = label;
        this.lines = lines;
        this.width = width;
    }

    @Override
    public void render() {
        System.out.println(label);
        for (int i = 0; i < lines; i++) {
            System.out.println("-".repeat(width));
        }
    }

    public String getInput() {
        Scanner scanner = new Scanner(System.in);
        StringBuilder text = new StringBuilder();
        for (int i = 0; i < lines; i++) {
            System.out.print("Ligne " + (i + 1) + ": ");
            text.append(scanner.nextLine()).append("\n");
        }
        return text.toString();
    }
}

class ConsoleFrame {
    private final String title;
    private final List<ConsoleComponent> components = new ArrayList<>();
    private final Scanner scanner = new Scanner(System.in);

    public ConsoleFrame(String title) {
        this.title = title;
    }

    public void addLabel(String text) {
        components.add(new ConsoleLabel(text));
    }

    public void addButton(String label, Runnable action) {
        components.add(new ConsoleButton(label, action));
    }

    public void addTable(String title, List<List<String>> data) {
        components.add(new ConsoleTable(title, data));
    }

    public void addComboBox(String label, List<String> options) {
        components.add(new ConsoleComboBox(label, options));
    }

    public void addTextField(String label) {
        components.add(new ConsoleTextField(label));
    }

    public void addCheckBox(String label) {
        components.add(new ConsoleCheckBox(label));
    }

    public void addRadioButton(String label, String option1, String option2) {
        components.add(new ConsoleRadioButton(label, option1, option2));
    }

    public void addTextArea(String label, int lines, int width) {
        components.add(new ConsoleTextArea(label, lines, width));
    }

    public void show() {
        while (true) {
            System.out.println("+" + "-".repeat(title.length() + 2) + "+");
            System.out.println("| " + title + " |");
            System.out.println("+" + "-".repeat(title.length() + 2) + "+");

            int index = 1;
            for (ConsoleComponent component : components) {
                System.out.print(index + ". ");
                component.render();
                index++;
            }

            System.out.print("> ");
            int choice = scanner.nextInt() - 1;
            scanner.nextLine(); // Consommer la nouvelle ligne après nextInt()

            if (choice >= 0 && choice < components.size()) {
                ConsoleComponent component = components.get(choice);
                if (component instanceof ConsoleButton) {
                    ((ConsoleButton) component).press();
                } else if (component instanceof ConsoleComboBox) {
                    ((ConsoleComboBox) component).render();
                    System.out.print("Sélectionnez une option: ");
                    int optionChoice = scanner.nextInt();
                    scanner.nextLine(); // Consommer la nouvelle ligne après nextInt()
                    System.out.println("Vous avez choisi: " + ((ConsoleComboBox) component).getSelection(optionChoice));
                } else if (component instanceof ConsoleTextField) {
                    ((ConsoleTextField) component).render();
                    String input = ((ConsoleTextField) component).getInput();
                    System.out.println("Vous avez entré: " + input);
                } else if (component instanceof ConsoleCheckBox) {
                    ((ConsoleCheckBox) component).render();
                    boolean isChecked = ((ConsoleCheckBox) component).isChecked();
                    System.out.println("Case cochée: " + isChecked);
                } else if (component instanceof ConsoleRadioButton) {
                    ((ConsoleRadioButton) component).render();
                    System.out.print("Sélectionnez une option: ");
                    int radioChoice = scanner.nextInt();
                    scanner.nextLine(); // Consommer la nouvelle ligne après nextInt()
                    System.out.println("Vous avez choisi: " + ((ConsoleRadioButton) component).getSelection(radioChoice));
                } else if (component instanceof ConsoleTextArea) {
                    ((ConsoleTextArea) component).render();
                    String textAreaInput = ((ConsoleTextArea) component).getInput();
                    System.out.println("Vous avez écrit: \n" + textAreaInput);
                }
            }
        }
    }
}

